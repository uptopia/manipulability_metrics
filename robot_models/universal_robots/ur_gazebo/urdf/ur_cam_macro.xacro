<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro">
  <!--
    Base UR robot series xacro macro.

    NOTE: this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note: that .xacro must still be processed by the xacro command).

    For use in '.launch' files: use one of the 'load_urX.launch' convenience
    launch files.

    This file models the base kinematic chain of a UR robot, which then gets
    parameterised by various configuration files to convert it into a UR3(e),
    UR5(e), UR10(e), UR16e, UR20 or UR30.

    NOTE: the default kinematic parameters (ie: link lengths, frame locations,
    offets, etc) do not correspond to any particular robot. They are defaults
    only. There WILL be non-zero offsets between the Forward Kinematics results
    in TF (ie: robot_state_publisher) and the values reported by the Teach
    Pendant.

    For accurate (and robot-specific) transforms, the 'kinematics_parameters_file'
    parameter MUST point to a .yaml file containing the appropriate values for
    the targetted robot.

    If using the UniversalRobots/Universal_Robots_ROS_Driver, follow the steps
    described in the readme of that repository to extract the kinematic
    calibration from the controller and generate the required .yaml file.

    Main author of the migration to yaml configs: Ludovic Delval.

    Contributors to previous versions (in no particular order):

     - Felix Messmer
     - Kelsey Hawkins
     - Wim Meeussen
     - Shaun Edwards
     - Nadia Hammoudeh Garcia
     - Dave Hershberger
     - G. vd. Hoorn
     - Philip Long
     - Dave Coleman
     - Miguel Prada
     - Mathias Luedtke
     - Marcel Schnirring
     - Felix von Drigalski
     - Felix Exner
     - Jimmy Da Silva
     - Ajit Krisshna N L
     - Muhammad Asif Rana
  -->

  <!-- <xacro:include filename="$(find ur_description)/urdf/inc/ur_transmissions.xacro" />
  <xacro:include filename="$(find ur_description)/urdf/inc/ur_common.xacro" /> -->
  
  <!--camera-->
  <!-- <xacro:include filename="$(find realsense2_description)/urdf/_d405.urdf.xacro" /> -->

  <xacro:macro name="ur_robot_gazebo" params="
    prefix
    joint_limits_parameters_file
    kinematics_parameters_file
    physical_parameters_file
    visual_parameters_file
    transmission_hw_interface:=hardware_interface/EffortJointInterface
    safety_limits:=false
    safety_pos_margin:=0.15
    safety_k_position:=20"
    >
    <!--
      Import the xacro macro for the REAL robot (which we'll augment with Gazebo
      specific elements in the wrapper macro below).

      NOTE: this imports the '_macro.xacro' from ur_description, as that contains
      the definitions for the real robot.
    -->
    <xacro:include filename="$(find ur_description)/urdf/inc/ur_cam_macro.xacro"/>

    <!-- Instantiate model for the REAL robot. -->
    <xacro:ur_robot
      prefix="${prefix}"
      joint_limits_parameters_file="${joint_limits_parameters_file}"
      kinematics_parameters_file="${kinematics_parameters_file}"
      physical_parameters_file="${physical_parameters_file}"
      visual_parameters_file="${visual_parameters_file}"
      transmission_hw_interface="${transmission_hw_interface}"
      safety_limits="${safety_limits}"
      safety_pos_margin="${safety_pos_margin}"
      safety_k_position="${safety_k_position}"
    />

    <!-- Configure self collision properties per link -->
    <gazebo reference="${prefix}shoulder_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}upper_arm_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}forearm_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_1_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_3_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_2_link">
      <selfCollide>true</selfCollide>
    </gazebo>
    <!-- <gazebo reference="${prefix}ee_link">
      <selfCollide>true</selfCollide>
    </gazebo> -->
    <gazebo reference="${prefix}flange">
      <selfCollide>true</selfCollide>
    </gazebo>

    <!--
      Inject Gazebo ROS Control plugin, which allows us to use ros_control
      controllers to control the virtual robot hw.
    -->
    <gazebo>
      <plugin name="ros_control" filename="libgazebo_ros_control.so">
        <!--robotNamespace>/</robotNamespace-->
        <!--robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType-->
      </plugin>
    </gazebo>

    <!--camera-->
    <!-- <xacro:arg name="use_nominal_extrinsics" default="true"/>
    <xacro:sensor_d405 parent="${prefix}wrist_3_link" use_nominal_extrinsics="$(arg use_nominal_extrinsics)">
      <origin xyz="0 0 0" rpy="0 -1.5707963268 0"/>
    </xacro:sensor_d405> -->

    <!-- <xacro:arg name="name"                    default="camera"/>
    <xacro:arg name="topics_ns"               default="camera"/>
    <xacro:arg name="use_nominal_extrinsics"  default="true"/>
    <xacro:arg name="visualize_color"         default="true"/>
    <xacro:arg name="align_depth"             default="true"/>
    <xacro:arg name="enable_pointCloud"       default="true"/> -->
    <!-- <xacro:include filename="$(find realsense2_description)/urdf/_d405.urdf.xacro" /> -->

    <!-- <xacro:sensor_d405 parent="${prefix}wrist_3_link" 
                      name="$(arg name)"
                      topics_ns="$(arg topics_ns)"
                      use_nominal_extrinsics="$(arg use_nominal_extrinsics)"
                      visualize_color="$(arg visualize_color)"
                      align_depth="$(arg align_depth)"
                      enable_pointCloud="$(arg enable_pointCloud)">
      <origin xyz="0 0 0" rpy="0 -1.5707963268 0"/>
    </xacro:sensor_d405> -->
    </xacro:macro>
</robot>
